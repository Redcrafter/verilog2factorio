
import * as assert from "assert";
import { signalV } from "../../src/entities/Entity.js";
import { RNG } from "../../src/random.js";
import { createSimulator, Const } from "../simulator.js";

let font = [
    0xF0, 0x90, 0x90, 0x90, 0xF0,
    0x20, 0x60, 0x20, 0x20, 0x70,
    0xF0, 0x10, 0xF0, 0x80, 0xF0,
    0xF0, 0x10, 0xF0, 0x10, 0xF0,
    0x90, 0x90, 0xF0, 0x10, 0x10,
    0xF0, 0x80, 0xF0, 0x10, 0xF0,
    0xF0, 0x80, 0xF0, 0x90, 0xF0,
    0xF0, 0x10, 0x20, 0x40, 0x40,
    0xF0, 0x90, 0xF0, 0x90, 0xF0,
    0xF0, 0x90, 0xF0, 0x10, 0xF0,
    0xF0, 0x90, 0xF0, 0x90, 0x90,
    0xE0, 0x90, 0xE0, 0x90, 0xE0,
    0xF0, 0x80, 0x80, 0x80, 0xF0,
    0xE0, 0x90, 0x90, 0x90, 0xE0,
    0xF0, 0x80, 0xF0, 0x80, 0xF0,
    0xF0, 0x80, 0xF0, 0x80, 0x80,
];

let tetris = new Uint8Array([0xa2, 0xb4, 0x23, 0xe6, 0x22, 0xb6, 0x70, 0x01, 0xd0, 0x11, 0x30, 0x25, 0x12, 0x06, 0x71, 0xff, 0xd0, 0x11, 0x60, 0x1a, 0xd0, 0x11, 0x60, 0x25, 0x31, 0x00, 0x12, 0x0e, 0xc4, 0x70, 0x44, 0x70, 0x12, 0x1c, 0xc3, 0x03, 0x60, 0x1e, 0x61, 0x03, 0x22, 0x5c, 0xf5, 0x15, 0xd0, 0x14, 0x3f, 0x01, 0x12, 0x3c, 0xd0, 0x14, 0x71, 0xff, 0xd0, 0x14, 0x23, 0x40, 0x12, 0x1c, 0xe7, 0xa1, 0x22, 0x72, 0xe8, 0xa1, 0x22, 0x84, 0xe9, 0xa1, 0x22, 0x96, 0xe2, 0x9e, 0x12, 0x50, 0x66, 0x00, 0xf6, 0x15, 0xf6, 0x07, 0x36, 0x00, 0x12, 0x3c, 0xd0, 0x14, 0x71, 0x01, 0x12, 0x2a, 0xa2, 0xc4, 0xf4, 0x1e, 0x66, 0x00, 0x43, 0x01, 0x66, 0x04, 0x43, 0x02, 0x66, 0x08, 0x43, 0x03, 0x66, 0x0c, 0xf6, 0x1e, 0x00, 0xee, 0xd0, 0x14, 0x70, 0xff, 0x23, 0x34, 0x3f, 0x01, 0x00, 0xee, 0xd0, 0x14, 0x70, 0x01, 0x23, 0x34, 0x00, 0xee, 0xd0, 0x14, 0x70, 0x01, 0x23, 0x34, 0x3f, 0x01, 0x00, 0xee, 0xd0, 0x14, 0x70, 0xff, 0x23, 0x34, 0x00, 0xee, 0xd0, 0x14, 0x73, 0x01, 0x43, 0x04, 0x63, 0x00, 0x22, 0x5c, 0x23, 0x34, 0x3f, 0x01, 0x00, 0xee, 0xd0, 0x14, 0x73, 0xff, 0x43, 0xff, 0x63, 0x03, 0x22, 0x5c, 0x23, 0x34, 0x00, 0xee, 0x80, 0x00, 0x67, 0x05, 0x68, 0x06, 0x69, 0x04, 0x61, 0x1f, 0x65, 0x10, 0x62, 0x07, 0x00, 0xee, 0x40, 0xe0, 0x00, 0x00, 0x40, 0xc0, 0x40, 0x00, 0x00, 0xe0, 0x40, 0x00, 0x40, 0x60, 0x40, 0x00, 0x40, 0x40, 0x60, 0x00, 0x20, 0xe0, 0x00, 0x00, 0xc0, 0x40, 0x40, 0x00, 0x00, 0xe0, 0x80, 0x00, 0x40, 0x40, 0xc0, 0x00, 0x00, 0xe0, 0x20, 0x00, 0x60, 0x40, 0x40, 0x00, 0x80, 0xe0, 0x00, 0x00, 0x40, 0xc0, 0x80, 0x00, 0xc0, 0x60, 0x00, 0x00, 0x40, 0xc0, 0x80, 0x00, 0xc0, 0x60, 0x00, 0x00, 0x80, 0xc0, 0x40, 0x00, 0x00, 0x60, 0xc0, 0x00, 0x80, 0xc0, 0x40, 0x00, 0x00, 0x60, 0xc0, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x00, 0xf0, 0x00, 0x00, 0x40, 0x40, 0x40, 0x40, 0x00, 0xf0, 0x00, 0x00, 0xd0, 0x14, 0x66, 0x35, 0x76, 0xff, 0x36, 0x00, 0x13, 0x38, 0x00, 0xee, 0xa2, 0xb4, 0x8c, 0x10, 0x3c, 0x1e, 0x7c, 0x01, 0x3c, 0x1e, 0x7c, 0x01, 0x3c, 0x1e, 0x7c, 0x01, 0x23, 0x5e, 0x4b, 0x0a, 0x23, 0x72, 0x91, 0xc0, 0x00, 0xee, 0x71, 0x01, 0x13, 0x50, 0x60, 0x1b, 0x6b, 0x00, 0xd0, 0x11, 0x3f, 0x00, 0x7b, 0x01, 0xd0, 0x11, 0x70, 0x01, 0x30, 0x25, 0x13, 0x62, 0x00, 0xee, 0x60, 0x1b, 0xd0, 0x11, 0x70, 0x01, 0x30, 0x25, 0x13, 0x74, 0x8e, 0x10, 0x8d, 0xe0, 0x7e, 0xff, 0x60, 0x1b, 0x6b, 0x00, 0xd0, 0xe1, 0x3f, 0x00, 0x13, 0x90, 0xd0, 0xe1, 0x13, 0x94, 0xd0, 0xd1, 0x7b, 0x01, 0x70, 0x01, 0x30, 0x25, 0x13, 0x86, 0x4b, 0x00, 0x13, 0xa6, 0x7d, 0xff, 0x7e, 0xff, 0x3d, 0x01, 0x13, 0x82, 0x23, 0xc0, 0x3f, 0x01, 0x23, 0xc0, 0x7a, 0x01, 0x23, 0xc0, 0x80, 0xa0, 0x6d, 0x07, 0x80, 0xd2, 0x40, 0x04, 0x75, 0xfe, 0x45, 0x02, 0x65, 0x04, 0x00, 0xee, 0xa7, 0x00, 0xf2, 0x55, 0xa8, 0x04, 0xfa, 0x33, 0xf2, 0x65, 0xf0, 0x29, 0x6d, 0x32, 0x6e, 0x00, 0xdd, 0xe5, 0x7d, 0x05, 0xf1, 0x29, 0xdd, 0xe5, 0x7d, 0x05, 0xf2, 0x29, 0xdd, 0xe5, 0xa7, 0x00, 0xf2, 0x65, 0xa2, 0xb4, 0x00, 0xee, 0x6a, 0x00, 0x60, 0x19, 0x00, 0xee, 0x37, 0x23]);

let log = [0, 0x0200, 0x0201, 0x0000, 0x0202, 0x0203, 0x02b4, 0x03e6, 0x03e7, 0x02b4, 0x03e8, 0x03e9, 0x02b4, 0x03ea, 0x03eb, 0x02b4, 0x0204, 0x0205, 0x02b4, 0x02b6, 0x02b7, 0x02b4, 0x02b8, 0x02b9, 0x02b4, 0x02ba, 0x02bb, 0x02b4, 0x02bc, 0x02bd, 0x02b4, 0x02be, 0x02bf, 0x02b4, 0x02c0, 0x02c1, 0x02b4, 0x02c2, 0x02c3, 0x02b4, 0x0206, 0x0207, 0x02b4, 0x0208, 0x0209, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x020a, 0x020b, 0x02b4, 0x020c, 0x020d, 0x02b4, 0x0206, 0x0207, 0x02b4, 0x0208, 0x0209, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x020a, 0x020b, 0x02b4, 0x020c, 0x020d, 0x02b4, 0x0206, 0x0207, 0x02b4, 0x0208, 0x0209, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x020a, 0x020b, 0x02b4, 0x020c, 0x020d, 0x02b4, 0x0206, 0x0207, 0x02b4, 0x0208, 0x0209, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x020a, 0x020b, 0x02b4, 0x020c, 0x020d, 0x02b4, 0x0206, 0x0207, 0x02b4, 0x0208, 0x0209, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x020a, 0x020b, 0x02b4, 0x020c, 0x020d, 0x02b4, 0x0206, 0x0207, 0x02b4, 0x0208, 0x0209, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x020a, 0x020b, 0x02b4, 0x020c, 0x020d, 0x02b4, 0x0206, 0x0207, 0x02b4, 0x0208, 0x0209, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x020a, 0x020b, 0x02b4, 0x020c, 0x020d, 0x02b4, 0x0206, 0x0207, 0x02b4, 0x0208, 0x0209, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x020a, 0x020b, 0x02b4, 0x020c, 0x020d, 0x02b4, 0x0206, 0x0207, 0x02b4, 0x0208, 0x0209, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x020a, 0x020b, 0x02b4, 0x020c, 0x020d, 0x02b4, 0x0206, 0x0207, 0x02b4, 0x0208, 0x0209, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x020a, 0x020b, 0x02b4, 0x020c, 0x020d, 0x02b4, 0x0206, 0x0207, 0x02b4, 0x0208, 0x0209, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x020a, 0x020b, 0x02b4, 0x020c, 0x020d, 0x02b4, 0x0206, 0x0207, 0x02b4, 0x0208, 0x0209, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x020a, 0x020b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021a, 0x021b, 0x02b4, 0x020e, 0x020f, 0x02b4, 0x0210, 0x0211, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0212, 0x0213, 0x02b4, 0x0214, 0x0215, 0x02b4, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x02b5, 0x0216, 0x0217, 0x02b4, 0x0218, 0x0219, 0x02b4, 0x021c, 0x021d, 0x02b4, 0x021e, 0x021f, 0x02b4, 0x0222, 0x0223, 0x02b4, 0x0224, 0x0225, 0x02b4, 0x0226, 0x0227, 0x02b4, 0x0228, 0x0229, 0x02b4, 0x025c, 0x025d, 0x02b4, 0x025e, 0x025f, 0x02c4, 0x0260, 0x0261, 0x02d4, 0x0262, 0x0263, 0x02d4, 0x0266, 0x0267, 0x02d4, 0x0268, 0x0269, 0x02d4, 0x026a, 0x026b, 0x02d4, 0x026e, 0x026f, 0x02d4, 0x0270, 0x0271, 0x02dc, 0x022a, 0x022b, 0x02dc, 0x022c, 0x022d, 0x02dc, 0x02dd, 0x02dd, 0x02dd, 0x02dd, 0x02dd, 0x02dd, 0x02dd, 0x02dd, 0x02de, 0x02de, 0x02de, 0x02de, 0x02de, 0x02de, 0x02de, 0x02de, 0x02df, 0x02df, 0x02df, 0x02df, 0x02df, 0x02df, 0x02df, 0x02df, 0x02e0, 0x02e0, 0x02e0, 0x02e0, 0x02e0, 0x02e0, 0x02e0, 0x02e0, 0x022e, 0x022f, 0x02dc, 0x0230, 0x0231, 0x02dc, 0x023c, 0x023d, 0x02dc, 0x0240, 0x0241, 0x02dc, 0x0244, 0x0245, 0x02dc, 0x0248, 0x0249, 0x02dc, 0x024a, 0x024b, 0x02dc, 0x0250, 0x0251, 0x02dc, 0x0252, 0x0253, 0x02dc, 0x0254, 0x0255, 0x02dc, 0x023c, 0x023d, 0x02dc, 0x0240, 0x0241, 0x02dc, 0x0244, 0x0245, 0x02dc, 0x0248, 0x0249, 0x02dc, 0x024a, 0x024b, 0x02dc, 0x0250, 0x0251, 0x02dc, 0x0252, 0x0253, 0x02dc, 0x0254, 0x0255, 0x02dc, 0x023c, 0x023d, 0x02dc, 0x0240, 0x0241, 0x02dc, 0x0244, 0x0245, 0x02dc, 0x0248, 0x0249, 0x02dc, 0x024a, 0x024b, 0x02dc, 0x0250, 0x0251, 0x02dc, 0x0252, 0x0253, 0x02dc, 0x0254, 0x0255, 0x02dc, 0x023c, 0x023d, 0x02dc, 0x0240, 0x0241, 0x02dc, 0x0244, 0x0245, 0x02dc, 0x0248, 0x0249, 0x02dc, 0x024a, 0x024b, 0x02dc, 0x0250, 0x0251, 0x02dc, 0x0252, 0x0253, 0x02dc, 0x0254, 0x0255, 0x02dc, 0x023c, 0x023d, 0x02dc, 0x0240, 0x0241, 0x02dc, 0x0244, 0x0245, 0x02dc, 0x0248, 0x0249, 0x02dc, 0x024a, 0x024b, 0x02dc, 0x0250, 0x0251, 0x02dc, 0x0252, 0x0253, 0x02dc, 0x0254, 0x0255, 0x02dc, 0x023c, 0x023d, 0x02dc, 0x0240, 0x0241, 0x02dc, 0x0244, 0x0245, 0x02dc, 0x0248, 0x0249, 0x02dc, 0x024a, 0x024b, 0x02dc, 0x0250, 0x0251, 0x02dc, 0x0252, 0x0253, 0x02dc, 0x0254, 0x0255, 0x02dc, 0x023c, 0x023d, 0x02dc, 0x0240, 0x0241, 0x02dc, 0x0244, 0x0245, 0x02dc, 0x0248, 0x0249, 0x02dc, 0x024a, 0x024b, 0x02dc, 0x0250, 0x0251, 0x02dc, 0x0252, 0x0253, 0x02dc, 0x0254, 0x0255, 0x02dc, 0x023c, 0x023d, 0x02dc, 0x0240, 0x0241, 0x02dc, 0x0244, 0x0245, 0x02dc, 0x0248, 0x0249, 0x02dc, 0x024a, 0x024b, 0x02dc, 0x0250, 0x0251, 0x02dc, 0x0252, 0x0253, 0x02dc, 0x0254, 0x0255, 0x02dc, 0x023c, 0x023d, 0x02dc, 0x0240, 0x0241, 0x02dc, 0x0244, 0x0245, 0x02dc, 0x0248, 0x0249, 0x02dc, 0x024a, 0x024b, 0x02dc, 0x0250, 0x0251, 0x02dc, 0x0252, 0x0253, 0x02dc, 0x0254, 0x0255, 0x02dc, 0x023c, 0x023d, 0x02dc, 0x0240, 0x0241, 0x02dc, 0x0244, 0x0245, 0x02dc, 0x0248, 0x0249, 0x02dc, 0x024a, 0x024b, 0x02dc, 0x0250, 0x0251, 0x02dc, 0x0252, 0x0253, 0x02dc, 0x0254, 0x0255, 0x02dc, 0x023c, 0x023d, 0x02dc, 0x0240, 0x0241, 0x02dc, 0x0244, 0x0245, 0x02dc, 0x0248, 0x0249, 0x02dc, 0x024a, 0x024b, 0x02dc, 0x0250, 0x0251, 0x02dc, 0x0252, 0x0253, 0x02dc, 0x0254, 0x0255, 0x02dc, 0x023c, 0x023d, 0x02dc, 0x0240, 0x0241, 0x02dc, 0x0244, 0x0245, 0x02dc, 0x0248, 0x0249, 0x02dc, 0x024a, 0x024b, 0x02dc, 0x0250, 0x0251, 0x02dc, 0x0252, 0x0253, 0x02dc, 0x0254, 0x0255, 0x02dc, 0x023c, 0x023d, 0x02dc, 0x0240, 0x0241, 0x02dc, 0x0244, 0x0245, 0x02dc, 0x0248, 0x0249, 0x02dc, 0x024a, 0x024b, 0x02dc, 0x0250, 0x0251, 0x02dc, 0x0252, 0x0253, 0x02dc, 0x0254, 0x0255, 0x02dc, 0x023c, 0x023d, 0x02dc, 0x0240, 0x0241, 0x02dc, 0x0244, 0x0245, 0x02dc, 0x0248, 0x0249, 0x02dc, 0x024a, 0x024b, 0x02dc, 0x0250, 0x0251, 0x02dc, 0x0252, 0x0253, 0x02dc, 0x0254, 0x0255, 0x02dc, 0x023c, 0x023d, 0x02dc, 0x0240, 0x0241, 0x02dc, 0x0244, 0x0245, 0x02dc, 0x0248, 0x0249, 0x02dc, 0x024a, 0x024b, 0x02dc, 0x0250, 0x0251, 0x02dc, 0x0252, 0x0253, 0x02dc, 0x0254, 0x0255, 0x02dc, 0x023c, 0x023d, 0x02dc, 0x0240, 0x0241, 0x02dc, 0x0244, 0x0245, 0x02dc, 0x0248, 0x0249, 0x02dc, 0x024a, 0x024b, 0x02dc, 0x0250, 0x0251, 0x02dc, 0x0252, 0x0253, 0x02dc, 0x0254, 0x0255, 0x02dc, 0x023c, 0x023d, 0x02dc, 0x0240, 0x0241, 0x02dc, 0x0244, 0x0245, 0x02dc, 0x0248, 0x0249, 0x02dc, 0x024a, 0x024b, 0x02dc, 0x0250, 0x0251, 0x02dc, 0x0252, 0x0253, 0x02dc, 0x0256, 0x0257, 0x02dc, 0x02dd, 0x02dd, 0x02dd, 0x02dd, 0x02dd, 0x02dd, 0x02dd, 0x02dd, 0x02de, 0x02de, 0x02de, 0x02de, 0x02de, 0x02de, 0x02de, 0x02de, 0x02df, 0x02df, 0x02df, 0x02df, 0x02df, 0x02df, 0x02df, 0x02df, 0x02e0, 0x02e0, 0x02e0, 0x02e0, 0x02e0, 0x02e0, 0x02e0, 0x02e0, 0x0258, 0x0259, 0x02dc, 0x025a, 0x025b, 0x02dc, 0x022a, 0x022b, 0x02dc, 0x022c, 0x022d, 0x02dc, 0x02dd, 0x02dd, 0x02dd, 0x02dd, 0x02dd, 0x02dd, 0x02dd, 0x02dd, 0x02de, 0x02de, 0x02de, 0x02de, 0x02de, 0x02de, 0x02de, 0x02de, 0x02df, 0x02df, 0x02df, 0x02df, 0x02df, 0x02df, 0x02df, 0x02df, 0x02e0, 0x02e0, 0x02e0, 0x02e0, 0x02e0, 0x02e0, 0x02e0, 0x02e0, 0x022e, 0x022f, 0x02dc, 0x0230, 0x0231, 0x02dc, 0x023c, 0x023d];

export async function testChip8() {
    let ram = new Uint8Array(0x1000);
    for (let i = 0; i < font.length; i++) ram[i] = font[i];
    for (let i = 0; i < tetris.length; i++) ram[i + 512] = tetris[i];

    let gfx = new Uint8Array(64 * 32);

    let sim = await createSimulator("./samples/chip8/chip8.sv", "chip8");
    let rng = new RNG();

    let clk = sim.ents[0] as Const;
    let reset = sim.ents[1] as Const;

    let memAddr = 0;
    let inData = sim.ents[3] as Const;

    let gfxAddr = 0;
    let gfxFlip = 0;
    let gfxVal = sim.ents[6] as Const;

    let rand = sim.ents[7] as Const;
    let key = sim.ents[8] as Const;

    let step = 0;
    function clock() {
        memAddr = sim.ents[2].getValue(signalV);
        gfxAddr = sim.ents[4].getValue(signalV);
        gfxFlip = sim.ents[5].getValue(signalV);

        rand.outSig[0].value = rng.int() & 255;
        inData.outSig[0].value = ram[memAddr];
        gfxVal.outSig[0].value = gfx[gfxAddr];

        // assert.ok(memAddr < ram.length, "program out of bounds");
        if(memAddr != log[step]) debugger;
        assert.strictEqual(memAddr, log[step]);
        step++;

        if(gfxFlip) {
            gfx[gfxAddr] ^= 1;
        }

        sim.update(10);

        clk.outSig[0].value = 1;
        sim.update(1);
        clk.outSig[0].value = 0;

        sim.update(10);
    }

    sim.update(20);
    reset.outSig[0].value = 1;
    clock();
    reset.outSig[0].value = 0;

    while (step < 1400) {
        clock();
    }
}
